
--Helper function to use with rolloutCreator class,
--parameter rci: an instance to a rolloutCreator
struct RollBuilder 
(
	function AddControlMatrix rci maxRows controlTypes controlNames widths height = 
	(
		--rci = rolloutCreator Instance
		--array of controls locals 
		local ctrlStr = #()
		for i=1 to controlTypes.count do
		(
			ctrlStr[i] = controlTypes[i] as string		
		)
		local controlNamesSep = #()	--names separated with commas
		for j = 1 to controlTypes.count do
		(
			controlNamesSep[j] = ""
		)
		local pos = [0,0]
		for j=1 to controlTypes.count  do
		(				
			for i=1 to maxRows do
			(				
				local ii = i as string
				local H = "height:"+(height as string)
				
				pos.y = (i-1) * height 			
				
				
				local W = " width:" +(widths[j] as string ) 				
				local posStr = " pos:"+(pos as string)
				local cName = (controlNames[j] + ii)
				
				rci.addControl controlTypes[j] cName "" paramStr:(H + W + posStr)
				controlNamesSep[j] =  controlNamesSep[j]+ ","+ cName 
				
			)
			pos.x = pos.x + widths[j] --+ 2
		)
		rci.AddText "--Arrays"
		for j=1 to controlTypes.count do
		(
			local s = substring controlNamesSep[j] 2 -1
			rci.addLocal (controlNames[j]+"_arr") init:("#("+s+")")
		)
		rci.AddText "--Pointers"
		local EventPointers = #()
		for j=1 to controlTypes.count do
		(			
			EventPointers[j] = controlNames[j]+"_event" 
			rci.addLocal (EventPointers[j]) init:undefined
		)
		rci.AddText "--Events"
		for j=1 to controlTypes.count  do
		(				
			for i=1 to maxRows do
			(
				local ii = i as string
				local s = "on "+ controlNames[j]+ii +" pressed do (if "
				local s = s + EventPointers[j] + "!=undefined then " + EventPointers[j] + " " + ii+ ")"
				rci.addText s
			)
		)
		rci.AddText "--"
	),

	function AddButtonRow rci names captions width height posy:0 =
	(
		--rci = rolloutCreator Instance
		for i=1 to names.count do
		(
			local W = " width:" + (width as string)
			local H = " height:" + (height as string)
			local p = [5 + (i-1)*width, posy]
			local posStr = " pos:" + (p as string)
			rci.addControl #button ("btn"+names[i]) Captions[i] paramStr:(H + W + posStr)
		)
		rci.AddText "--"
		local fEventName = "footerBtn_Event"
		rci.AddLocal fEventName init:undefined
		rci.AddText "--"
		--TODO: naa... better to put all footerns buttons in a single Event pointer
		for i=1 to names.count do
		(
			local cName = "btn"+ names[i]			
			local s = "on " + cName + " pressed do (if "
			s = s + fEventName+"!=undefined then "+ fEventName+" \""+names[i]+"\" )"
			rci.addText s
		)
	),
	
	function CreateActionListRoll rollName rollCaption FullWidth height maxRows:10 startY:0 rolloutFloater: =
	(
		struct ActionList 
		(
			rollDef,			
			maxRows,
			rowCount = 0,
			rowHeight,
			itemObjects = #(),
			
			--EVENTS
			--onAddItem(idx):should return #(string, obj)
			onAddItem,
			onItemAction,
			onEditItem,
			
			function init =
			(
				--Call this after 
				for i=1 to rollDef.edit_arr.count do
				(					
					rollDef.edit_arr[i].caption = ";"
					rollDef.edit_arr[i].tooltip = "Edit"
					rollDef.action_arr[i].caption = "item " + (i as string)
					rollDef.action_arr[i].tooltip = "Execute!"
					rollDef.up_arr[i].caption = "^" 
					rollDef.up_arr[i].tooltip = "Move to first"
					rollDef.remove_arr[i].caption ="X"
					rollDef.remove_arr[i].tooltip ="Remove"
				)
				rollDef.up_arr[1].enabled = false;
				rollDef.btnAdd.tooltip = "Add..."
			),
			function setRowCount N =
			(
				if N > maxRows then N = maxRows
				rowCount = N
				for i=1 to maxRows do
				(
					local show = (i <= N)
					rollDef.edit_arr[i].visible = show;
					rollDef.action_arr[i].visible = show;
					rollDef.up_arr[i].visible = show;
					rollDef.remove_arr[i].visible = show;
				)
				rollDef.height = (N+1.2) * rowHeight
				rollDef.btnAdd.pos.y = (N)*rowHeight
				rollDef.btnAdd.pos.x = 0;
				if N<maxRows then 
				( rollDef.btnAdd.enabled = true)
				else (rollDef.btnAdd.enabled = false)
			),
			
			function btnAdd_event =
			(
				if rowCount < maxRows then 
				(				
					
					if (onAddItem != undefined) then
					(
						local itemInfo = onAddItem rowCount
						if itemInfo != undefined then
						(
							setRowCount (rowCount + 1)
							rollDef.action_arr[rowCount].caption = itemInfo[1]
							itemObjects[rowCount] = itemInfo
						) 
					) 
				)
			),
			
			function refreshCaptions =
			(
				for i=1 to rowCount do
				(
					if itemObjects[i] != undefined then
					(
						rollDef.action_arr[i].caption = itemObjects[i][1]
					)
				)
			),
			
			function remove_event itemIdx =
			(
				if rowCount>0 then
				(
					deleteItem itemObjects itemIdx
					refreshCaptions()
					print ( "removing "+(itemIdx as string));
					setRowCount (rowCount - 1);
				)
			),
			
			function action_event itemIdx =
			(
				--edit itemObjects[itemIdx][2]
				if onItemAction!=undefined then
				(
					local c = undefined
					local obj = undefined
					if itemObjects [itemIdx]!=undefined then
					(
						c = itemObjects[itemIdx][1]
						obj = itemObjects[itemIdx][2]
					)
					onItemAction c obj
				)
			),
			
			function up_event itemIdx =
			(
				if itemIdx > 1 then 
				(
					local tmp = itemObjects[itemIdx]
					itemObjects[itemIdx] =itemObjects[itemIdx-1]
					itemObjects[itemIdx-1] = tmp
					refreshCaptions()
				)
			),
			
			function edit_event itemIdx =
			(				
				if onEditItem!=undefined then
				(
					local c = undefined
					local obj = undefined
					if itemObjects [itemIdx]!=undefined then
					(
						c = itemObjects[itemIdx][1]
						obj = itemObjects[itemIdx][2]
					)
					local result = onEditItem c obj
					if result!=undefined then
					(
						itemObjects[itemIdx][1] = result[1]
						itemObjects[itemIdx][2] = result[2]
						refreshCaptions()
					)
				)
			),
			
			function getObjects =
			(
				local result = #()
				for i =1 to itemObjects.count do result[i] = itemObjects[i][2];
				(result)
			)			
			
		)
		
		local al = ActionList()
		al.maxRows = maxRows
		al.rowHeight = height
		local rci = rolloutCreator rollName rollCaption
		rci.begin()
		local cTypes = #(#button, #button, #button, #button)
		local cNames = #("edit", "action", "up","remove")
		local H = height
		local b1Width = FullWidth-(H+2)*3 - 8
		local cWidths = #(H, b1Width, H, H)
		AddControlMatrix rci maxRows cTypes cNames cWidths H
		rci.addControl #button "btnAdd" "+" paramStr:("height:"+(H as string)+ " width:"+(H as string))
		rci.addLocal "btnAdd_event"
		rci.addText "on btnAdd pressed do (btnAdd_event())"
		--
		rci.end()
		--print rci.str
		--
		al.rollDef = rci.def
		if (rolloutFloater==unsupplied) then 
		( 
			--If NOT provided then ActionList.init() must be called after adding the rollout or creating a dialog
		)
		else
		(
			addRollout al.rollDef rolloutFloater
			al.init()
			al.setRowCount 0
			al.rollDef.btnAdd_event = al.btnAdd_event
			al.rollDef.remove_event = al.remove_event
			al.rollDef.action_event = al.action_event
			al.rollDef.up_event = al.up_event
			al.rollDef.edit_event = al.edit_event
		)
			
		--return
		(al)
	)
)